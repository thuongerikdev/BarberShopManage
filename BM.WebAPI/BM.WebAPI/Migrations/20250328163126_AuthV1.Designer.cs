// <auto-generated />
using System;
using BM.Auth.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BM.WebAPI.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20250328163126_AuthV1")]
    partial class AuthV1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BM.Auth.Domain.AuthBranches", b =>
                {
                    b.Property<int>("branchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("branchID"));

                    b.Property<double>("branchArea")
                        .HasColumnType("float");

                    b.Property<string>("branchHotline")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("branchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("branchStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("branchType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("endWork")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("startWork")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("branchID");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthCusPromo", b =>
                {
                    b.Property<int>("cusPromoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cusPromoID"));

                    b.Property<string>("cusPromoStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("customerID")
                        .HasColumnType("int");

                    b.Property<int>("promoID")
                        .HasColumnType("int");

                    b.HasKey("cusPromoID");

                    b.HasIndex("promoID");

                    b.ToTable("CusPromos");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthCustomer", b =>
                {
                    b.Property<int>("customerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("customerID"));

                    b.Property<string>("customerStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customerType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("loyaltyPoints")
                        .HasColumnType("float");

                    b.Property<double>("percentDiscount")
                        .HasColumnType("float");

                    b.Property<double>("totalSpent")
                        .HasColumnType("float");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.Property<int>("vipID")
                        .HasColumnType("int");

                    b.HasKey("customerID");

                    b.HasIndex("userID")
                        .IsUnique();

                    b.HasIndex("vipID");

                    b.ToTable("AuthCustomer", "auth");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthEmp", b =>
                {
                    b.Property<int>("empID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("empID"));

                    b.Property<double>("bonusSalary")
                        .HasColumnType("float");

                    b.Property<int>("branchID")
                        .HasColumnType("int");

                    b.Property<string>("empCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("positionID")
                        .HasColumnType("int");

                    b.Property<double>("rate")
                        .HasColumnType("float");

                    b.Property<double>("salary")
                        .HasColumnType("float");

                    b.Property<int>("specialtyID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("startDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.HasKey("empID");

                    b.HasIndex("branchID");

                    b.HasIndex("positionID");

                    b.HasIndex("specialtyID");

                    b.HasIndex("userID")
                        .IsUnique();

                    b.ToTable("AuthEmp", "auth");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthPermission", b =>
                {
                    b.Property<int>("permissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("permissionID"));

                    b.Property<string>("permissionDes")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("permissionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("startDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("permissionID");

                    b.ToTable("AuthPermission", "auth");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthPosition", b =>
                {
                    b.Property<int>("positionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("positionID"));

                    b.Property<double>("DefaultSalary")
                        .HasColumnType("float");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("positionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("positionID");

                    b.ToTable("AuthPosition", "auth");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthRole", b =>
                {
                    b.Property<int>("roleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("roleID"));

                    b.Property<string>("roleDes")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("startDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("roleID");

                    b.ToTable("AuthRole", "auth");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthRolePermission", b =>
                {
                    b.Property<int>("rolePermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("rolePermissionID"));

                    b.Property<int>("permissionID")
                        .HasColumnType("int");

                    b.Property<int>("roleID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("startDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("rolePermissionID");

                    b.HasIndex("permissionID");

                    b.HasIndex("roleID");

                    b.ToTable("AuthRolePermission", "auth");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthScheEmp", b =>
                {
                    b.Property<int>("scheEmpID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("scheEmpID"));

                    b.Property<int>("empID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("scheduleID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("startDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("scheEmpID");

                    b.HasIndex("empID");

                    b.HasIndex("scheduleID");

                    b.ToTable("AuthScheEmp", "auth");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthSchedule", b =>
                {
                    b.Property<int>("scheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("scheduleID"));

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("percent")
                        .HasColumnType("int");

                    b.Property<string>("scheduleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("startDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("scheduleID");

                    b.ToTable("AuthSchedule", "auth");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthSpecialty", b =>
                {
                    b.Property<int>("specialtyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("specialtyID"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("percent")
                        .HasColumnType("int");

                    b.Property<string>("specialtyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("specialtyID");

                    b.ToTable("AuthSpecialty", "auth");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthUser", b =>
                {
                    b.Property<int>("userID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userID"));

                    b.Property<string>("avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("emailVerificationToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("isEmailVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("isEmp")
                        .HasColumnType("bit");

                    b.Property<string>("passwordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("passwordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("roleID")
                        .HasColumnType("int");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("userID");

                    b.HasIndex("roleID");

                    b.ToTable("AuthUser", "auth");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthVip", b =>
                {
                    b.Property<int>("vipID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("vipID"));

                    b.Property<double>("vipCost")
                        .HasColumnType("float");

                    b.Property<double>("vipDiscount")
                        .HasColumnType("float");

                    b.Property<int>("vipStatus")
                        .HasColumnType("int");

                    b.Property<int>("vipType")
                        .HasColumnType("int");

                    b.HasKey("vipID");

                    b.ToTable("Vips");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthCusPromo", b =>
                {
                    b.HasOne("BM.Auth.Domain.AuthCustomer", "AuthCustomer")
                        .WithMany("AuthCusPromos")
                        .HasForeignKey("promoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthCustomer");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthCustomer", b =>
                {
                    b.HasOne("BM.Auth.Domain.AuthUser", "AuthUser")
                        .WithOne("AuthCustomer")
                        .HasForeignKey("BM.Auth.Domain.AuthCustomer", "userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BM.Auth.Domain.AuthVip", "AuthVip")
                        .WithMany("AuthCustomers")
                        .HasForeignKey("vipID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthUser");

                    b.Navigation("AuthVip");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthEmp", b =>
                {
                    b.HasOne("BM.Auth.Domain.AuthBranches", "AuthBranches")
                        .WithMany("AuthEmps")
                        .HasForeignKey("branchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BM.Auth.Domain.AuthPosition", "AuthPosition")
                        .WithMany("AuthEmps")
                        .HasForeignKey("positionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BM.Auth.Domain.AuthSpecialty", "AuthSpecialty")
                        .WithMany("AuthEmps")
                        .HasForeignKey("specialtyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BM.Auth.Domain.AuthUser", "AuthUser")
                        .WithOne("AuthEmp")
                        .HasForeignKey("BM.Auth.Domain.AuthEmp", "userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthBranches");

                    b.Navigation("AuthPosition");

                    b.Navigation("AuthSpecialty");

                    b.Navigation("AuthUser");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthRolePermission", b =>
                {
                    b.HasOne("BM.Auth.Domain.AuthPermission", "AuthPermission")
                        .WithMany("AuthRolePermissions")
                        .HasForeignKey("permissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BM.Auth.Domain.AuthRole", "AuthRole")
                        .WithMany("AuthRolePermissions")
                        .HasForeignKey("roleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthPermission");

                    b.Navigation("AuthRole");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthScheEmp", b =>
                {
                    b.HasOne("BM.Auth.Domain.AuthEmp", "AuthEmp")
                        .WithMany("AuthScheEmps")
                        .HasForeignKey("empID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BM.Auth.Domain.AuthSchedule", "AuthSchedule")
                        .WithMany("AuthScheEmps")
                        .HasForeignKey("scheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthEmp");

                    b.Navigation("AuthSchedule");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthUser", b =>
                {
                    b.HasOne("BM.Auth.Domain.AuthRole", "AuthRoles")
                        .WithMany("AuthUsers")
                        .HasForeignKey("roleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthRoles");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthBranches", b =>
                {
                    b.Navigation("AuthEmps");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthCustomer", b =>
                {
                    b.Navigation("AuthCusPromos");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthEmp", b =>
                {
                    b.Navigation("AuthScheEmps");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthPermission", b =>
                {
                    b.Navigation("AuthRolePermissions");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthPosition", b =>
                {
                    b.Navigation("AuthEmps");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthRole", b =>
                {
                    b.Navigation("AuthRolePermissions");

                    b.Navigation("AuthUsers");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthSchedule", b =>
                {
                    b.Navigation("AuthScheEmps");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthSpecialty", b =>
                {
                    b.Navigation("AuthEmps");
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthUser", b =>
                {
                    b.Navigation("AuthCustomer")
                        .IsRequired();

                    b.Navigation("AuthEmp")
                        .IsRequired();
                });

            modelBuilder.Entity("BM.Auth.Domain.AuthVip", b =>
                {
                    b.Navigation("AuthCustomers");
                });
#pragma warning restore 612, 618
        }
    }
}
