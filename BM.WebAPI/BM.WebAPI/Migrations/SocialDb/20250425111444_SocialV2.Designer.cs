// <auto-generated />
using System;
using BM.Social.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BM.WebAPI.Migrations.SocialDb
{
    [DbContext(typeof(SocialDbContext))]
    [Migration("20250425111444_SocialV2")]
    partial class SocialV2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BM.Social.Domain.SocailBlogTopic", b =>
                {
                    b.Property<int>("topicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("topicID"));

                    b.Property<int>("blogID")
                        .HasColumnType("int");

                    b.Property<int>("position")
                        .HasColumnType("int");

                    b.Property<string>("topicContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("topicDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("topicStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("topicTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("topicID");

                    b.HasIndex("blogID");

                    b.ToTable("socialBlogTopics");
                });

            modelBuilder.Entity("BM.Social.Domain.SocialBlog", b =>
                {
                    b.Property<int>("blogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("blogID"));

                    b.Property<string>("blogContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("blogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("blogDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("blogImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("blogLike")
                        .HasColumnType("int");

                    b.Property<string>("blogStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("blogTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("blogID");

                    b.ToTable("SocialBlog", "social");
                });

            modelBuilder.Entity("BM.Social.Domain.SocialBlogComment", b =>
                {
                    b.Property<int>("commentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("commentID"));

                    b.Property<int>("blogID")
                        .HasColumnType("int");

                    b.Property<string>("commentContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("commentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("commentLike")
                        .HasColumnType("int");

                    b.Property<string>("commentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.HasKey("commentID");

                    b.HasIndex("blogID");

                    b.ToTable("socialBlogComments");
                });

            modelBuilder.Entity("BM.Social.Domain.SocialBlogContent", b =>
                {
                    b.Property<int>("contentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("contentID"));

                    b.Property<int>("blogID")
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("contentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("contentTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("position")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("contentID");

                    b.HasIndex("blogID");

                    b.ToTable("socialBlogContents");
                });

            modelBuilder.Entity("BM.Social.Domain.SocialBlogImage", b =>
                {
                    b.Property<int>("blogImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("blogImageID"));

                    b.Property<int>("blogID")
                        .HasColumnType("int");

                    b.Property<int>("position")
                        .HasColumnType("int");

                    b.Property<string>("srcImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("topicImageDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("blogImageID");

                    b.HasIndex("blogID");

                    b.ToTable("socialBlogImages");
                });

            modelBuilder.Entity("BM.Social.Domain.SocialGroup", b =>
                {
                    b.Property<int>("groupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("groupID"));

                    b.Property<DateTime>("groupDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("groupDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("groupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("groupStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("srcID")
                        .HasColumnType("int");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("groupID");

                    b.ToTable("socialGroups");
                });

            modelBuilder.Entity("BM.Social.Domain.SocialGroupUser", b =>
                {
                    b.Property<int>("socialGroupUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("socialGroupUserID"));

                    b.Property<int>("groupID")
                        .HasColumnType("int");

                    b.Property<DateTime>("memberDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.HasKey("socialGroupUserID");

                    b.HasIndex("groupID");

                    b.ToTable("socialGroupUsers");
                });

            modelBuilder.Entity("BM.Social.Domain.SocialMessage", b =>
                {
                    b.Property<int>("messageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("messageID"));

                    b.Property<int>("SocialGroupgroupID")
                        .HasColumnType("int");

                    b.Property<int>("groupID")
                        .HasColumnType("int");

                    b.Property<string>("messageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("messageDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("messageStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("receiverID")
                        .HasColumnType("int");

                    b.Property<int>("senderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("updateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("messageID");

                    b.HasIndex("SocialGroupgroupID");

                    b.ToTable("socialMessages");
                });

            modelBuilder.Entity("BM.Social.Domain.SocialSrc", b =>
                {
                    b.Property<int>("srcID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("srcID"));

                    b.Property<string>("imageSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("srcDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("srcName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("srcTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("srcID");

                    b.ToTable("SocialSrc", "social");
                });

            modelBuilder.Entity("BM.Social.Domain.SocailBlogTopic", b =>
                {
                    b.HasOne("BM.Social.Domain.SocialBlog", "SocialBlog")
                        .WithMany("SocialBlogTopics")
                        .HasForeignKey("blogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialBlog");
                });

            modelBuilder.Entity("BM.Social.Domain.SocialBlogComment", b =>
                {
                    b.HasOne("BM.Social.Domain.SocialBlog", "SocialBlog")
                        .WithMany("SocialBlogComments")
                        .HasForeignKey("blogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialBlog");
                });

            modelBuilder.Entity("BM.Social.Domain.SocialBlogContent", b =>
                {
                    b.HasOne("BM.Social.Domain.SocialBlog", "SocialBlog")
                        .WithMany("SocialBlogContents")
                        .HasForeignKey("blogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialBlog");
                });

            modelBuilder.Entity("BM.Social.Domain.SocialBlogImage", b =>
                {
                    b.HasOne("BM.Social.Domain.SocialBlog", "SocialBlog")
                        .WithMany("SocialBlogImages")
                        .HasForeignKey("blogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialBlog");
                });

            modelBuilder.Entity("BM.Social.Domain.SocialGroupUser", b =>
                {
                    b.HasOne("BM.Social.Domain.SocialGroup", "SocialGroup")
                        .WithMany("SocialGroupUsers")
                        .HasForeignKey("groupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialGroup");
                });

            modelBuilder.Entity("BM.Social.Domain.SocialMessage", b =>
                {
                    b.HasOne("BM.Social.Domain.SocialGroup", "SocialGroup")
                        .WithMany("SocialMessages")
                        .HasForeignKey("SocialGroupgroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialGroup");
                });

            modelBuilder.Entity("BM.Social.Domain.SocialBlog", b =>
                {
                    b.Navigation("SocialBlogComments");

                    b.Navigation("SocialBlogContents");

                    b.Navigation("SocialBlogImages");

                    b.Navigation("SocialBlogTopics");
                });

            modelBuilder.Entity("BM.Social.Domain.SocialGroup", b =>
                {
                    b.Navigation("SocialGroupUsers");

                    b.Navigation("SocialMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
