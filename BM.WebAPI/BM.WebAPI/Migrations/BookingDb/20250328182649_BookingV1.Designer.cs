// <auto-generated />
using System;
using BM.Booking.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BM.WebAPI.Migrations.BookingDb
{
    [DbContext(typeof(BookingDbContext))]
    [Migration("20250328182649_BookingV1")]
    partial class BookingV1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BM.Booking.Domain.BookingAppointment", b =>
                {
                    b.Property<int>("appID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("appID"));

                    b.Property<string>("appStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("empID")
                        .HasColumnType("int");

                    b.Property<int>("orderID")
                        .HasColumnType("int");

                    b.Property<int>("servID")
                        .HasColumnType("int");

                    b.HasKey("appID");

                    b.HasIndex("orderID");

                    b.HasIndex("servID");

                    b.ToTable("BookingAppointment", "booking");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingInvoice", b =>
                {
                    b.Property<int>("invoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("invoiceID"));

                    b.Property<DateTime>("invoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("orderID")
                        .HasColumnType("int");

                    b.Property<string>("paymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("paymentTerms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("totalAmount")
                        .HasColumnType("float");

                    b.HasKey("invoiceID");

                    b.HasIndex("orderID")
                        .IsUnique();

                    b.ToTable("BookingInvoice", "booking");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingOrder", b =>
                {
                    b.Property<int>("orderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("orderID"));

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("custID")
                        .HasColumnType("int");

                    b.Property<DateTime>("orderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("orderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("orderTotal")
                        .HasColumnType("float");

                    b.HasKey("orderID");

                    b.ToTable("BookingOrder", "booking");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingPromotion", b =>
                {
                    b.Property<int>("promoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("promoID"));

                    b.Property<string>("promoDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("promoDiscount")
                        .HasColumnType("float");

                    b.Property<DateTime>("promoEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("promoName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("promoStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("promoStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("promoID");

                    b.ToTable("BookingPromotion", "booking");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingReview", b =>
                {
                    b.Property<int>("reviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("reviewID"));

                    b.Property<int>("appID")
                        .HasColumnType("int");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<string>("reviewContent")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("reviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("reviewStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("reviewID");

                    b.HasIndex("appID")
                        .IsUnique();

                    b.ToTable("BookingReview", "booking");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingServPro", b =>
                {
                    b.Property<int>("servProID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("servProID"));

                    b.Property<int>("promoID")
                        .HasColumnType("int");

                    b.Property<int>("servID")
                        .HasColumnType("int");

                    b.HasKey("servProID");

                    b.HasIndex("promoID");

                    b.HasIndex("servID");

                    b.ToTable("BookingServPro", "booking");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingService", b =>
                {
                    b.Property<int>("servID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("servID"));

                    b.Property<string>("servDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("servImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("servName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("servPrice")
                        .HasColumnType("float");

                    b.Property<string>("servStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("servID");

                    b.ToTable("BookingService", "booking");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingAppointment", b =>
                {
                    b.HasOne("BM.Booking.Domain.BookingOrder", "BookingOrder")
                        .WithMany("BookingAppointments")
                        .HasForeignKey("orderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BM.Booking.Domain.BookingService", "BookingService")
                        .WithMany("BookingAppointments")
                        .HasForeignKey("servID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingOrder");

                    b.Navigation("BookingService");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingInvoice", b =>
                {
                    b.HasOne("BM.Booking.Domain.BookingOrder", "BookingOrder")
                        .WithOne("BookingInvoice")
                        .HasForeignKey("BM.Booking.Domain.BookingInvoice", "orderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingOrder");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingReview", b =>
                {
                    b.HasOne("BM.Booking.Domain.BookingAppointment", "BookingAppointment")
                        .WithOne("BookingReviews")
                        .HasForeignKey("BM.Booking.Domain.BookingReview", "appID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingAppointment");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingServPro", b =>
                {
                    b.HasOne("BM.Booking.Domain.BookingPromotion", "BookingPromotion")
                        .WithMany("BookingServPros")
                        .HasForeignKey("promoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BM.Booking.Domain.BookingService", "BookingService")
                        .WithMany("BookingServPros")
                        .HasForeignKey("servID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingPromotion");

                    b.Navigation("BookingService");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingAppointment", b =>
                {
                    b.Navigation("BookingReviews")
                        .IsRequired();
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingOrder", b =>
                {
                    b.Navigation("BookingAppointments");

                    b.Navigation("BookingInvoice")
                        .IsRequired();
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingPromotion", b =>
                {
                    b.Navigation("BookingServPros");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingService", b =>
                {
                    b.Navigation("BookingAppointments");

                    b.Navigation("BookingServPros");
                });
#pragma warning restore 612, 618
        }
    }
}
