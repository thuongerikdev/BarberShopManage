// <auto-generated />
using System;
using BM.Booking.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BM.WebAPI.Migrations.BookingDb
{
    [DbContext(typeof(BookingDbContext))]
    [Migration("20250418060452_BookingV1")]
    partial class BookingV1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BM.Booking.Domain.BookingAppointment", b =>
                {
                    b.Property<int>("appID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("appID"));

                    b.Property<string>("appStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("empID")
                        .HasColumnType("int");

                    b.Property<int>("orderID")
                        .HasColumnType("int");

                    b.Property<int>("serviceDetailID")
                        .HasColumnType("int");

                    b.HasKey("appID");

                    b.HasIndex("orderID");

                    b.HasIndex("serviceDetailID");

                    b.ToTable("BookingAppointment", "booking");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingCategory", b =>
                {
                    b.Property<int>("categoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("categoryID"));

                    b.Property<string>("categoryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("categoryImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("categoryPrice")
                        .HasColumnType("float");

                    b.Property<string>("categoryStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("categoryID");

                    b.ToTable("BookingCategories");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingInvoice", b =>
                {
                    b.Property<int>("invoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("invoiceID"));

                    b.Property<DateTime>("invoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("orderID")
                        .HasColumnType("int");

                    b.Property<string>("paymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("paymentTerms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("totalAmount")
                        .HasColumnType("float");

                    b.HasKey("invoiceID");

                    b.HasIndex("orderID")
                        .IsUnique();

                    b.ToTable("BookingInvoice", "booking");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingOrder", b =>
                {
                    b.Property<int>("orderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("orderID"));

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("custID")
                        .HasColumnType("int");

                    b.Property<DateTime>("orderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("orderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("orderTotal")
                        .HasColumnType("float");

                    b.HasKey("orderID");

                    b.ToTable("BookingOrder", "booking");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingOrderProduct", b =>
                {
                    b.Property<int>("orderProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("orderProductID"));

                    b.Property<int>("orderID")
                        .HasColumnType("int");

                    b.Property<int>("productDetailID")
                        .HasColumnType("int");

                    b.Property<double>("productPrice")
                        .HasColumnType("float");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("orderProductID");

                    b.HasIndex("orderID");

                    b.HasIndex("productDetailID");

                    b.ToTable("BookingOrderProducts");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingProduct", b =>
                {
                    b.Property<int>("productID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("productID"));

                    b.Property<int>("categoryID")
                        .HasColumnType("int");

                    b.Property<string>("productDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("productPrice")
                        .HasColumnType("float");

                    b.Property<string>("productStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("productID");

                    b.HasIndex("categoryID");

                    b.ToTable("BookingProduct", "booking");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingProductDescription", b =>
                {
                    b.Property<int>("productDescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("productDescriptionID"));

                    b.Property<string>("productColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("productDescriptionID");

                    b.ToTable("BookingProductDescriptions");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingProductDetail", b =>
                {
                    b.Property<int>("productDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("productDetailID"));

                    b.Property<int>("productDescriptionID")
                        .HasColumnType("int");

                    b.Property<int>("productID")
                        .HasColumnType("int");

                    b.Property<double>("productPrice")
                        .HasColumnType("float");

                    b.Property<int>("productQuantity")
                        .HasColumnType("int");

                    b.Property<int>("supplierID")
                        .HasColumnType("int");

                    b.HasKey("productDetailID");

                    b.HasIndex("productDescriptionID");

                    b.HasIndex("productID");

                    b.HasIndex("supplierID");

                    b.ToTable("BookingProductDetails");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingReview", b =>
                {
                    b.Property<int>("reviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("reviewID"));

                    b.Property<int>("orderID")
                        .HasColumnType("int");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<string>("reviewContent")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("reviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("reviewStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("reviewID");

                    b.HasIndex("orderID")
                        .IsUnique();

                    b.ToTable("BookingReview", "booking");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingService", b =>
                {
                    b.Property<int>("servID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("servID"));

                    b.Property<string>("servDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("servImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("servName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("servPrice")
                        .HasColumnType("float");

                    b.Property<string>("servStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("servID");

                    b.ToTable("BookingService", "booking");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingServiceDetail", b =>
                {
                    b.Property<int>("serviceDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("serviceDetailID"));

                    b.Property<string>("servDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("servID")
                        .HasColumnType("int");

                    b.Property<string>("servImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("servName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("servPrice")
                        .HasColumnType("float");

                    b.Property<string>("servStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("serviceDetailID");

                    b.HasIndex("servID");

                    b.ToTable("BookingServiceDetails");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingSupplier", b =>
                {
                    b.Property<int>("supplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("supplierID"));

                    b.Property<string>("supplierAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("supplierID");

                    b.ToTable("BookingSuppliers");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingAppointment", b =>
                {
                    b.HasOne("BM.Booking.Domain.BookingOrder", "BookingOrder")
                        .WithMany("BookingAppointments")
                        .HasForeignKey("orderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BM.Booking.Domain.BookingServiceDetail", "BookingServiceDetails")
                        .WithMany("BookingAppointments")
                        .HasForeignKey("serviceDetailID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingOrder");

                    b.Navigation("BookingServiceDetails");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingInvoice", b =>
                {
                    b.HasOne("BM.Booking.Domain.BookingOrder", "BookingOrder")
                        .WithOne("BookingInvoice")
                        .HasForeignKey("BM.Booking.Domain.BookingInvoice", "orderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingOrder");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingOrderProduct", b =>
                {
                    b.HasOne("BM.Booking.Domain.BookingOrder", "BookingOrder")
                        .WithMany("BookingOrderProducts")
                        .HasForeignKey("orderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BM.Booking.Domain.BookingProductDetail", "BookingProductDetail")
                        .WithMany("BookingOrderProducts")
                        .HasForeignKey("productDetailID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingOrder");

                    b.Navigation("BookingProductDetail");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingProduct", b =>
                {
                    b.HasOne("BM.Booking.Domain.BookingCategory", "BookingCategory")
                        .WithMany("BookingProducts")
                        .HasForeignKey("categoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingCategory");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingProductDetail", b =>
                {
                    b.HasOne("BM.Booking.Domain.BookingProductDescription", "BookingProductDescription")
                        .WithMany("BookingProductDetails")
                        .HasForeignKey("productDescriptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BM.Booking.Domain.BookingProduct", "BookingProduct")
                        .WithMany("BookingProductDetails")
                        .HasForeignKey("productID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BM.Booking.Domain.BookingSupplier", "BookingSupplier")
                        .WithMany("BookingProductDetails")
                        .HasForeignKey("supplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingProduct");

                    b.Navigation("BookingProductDescription");

                    b.Navigation("BookingSupplier");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingReview", b =>
                {
                    b.HasOne("BM.Booking.Domain.BookingOrder", "BookingOrder")
                        .WithOne("BookingReview")
                        .HasForeignKey("BM.Booking.Domain.BookingReview", "orderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingOrder");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingServiceDetail", b =>
                {
                    b.HasOne("BM.Booking.Domain.BookingService", "BookingService")
                        .WithMany("BookingServiceDetails")
                        .HasForeignKey("servID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingService");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingCategory", b =>
                {
                    b.Navigation("BookingProducts");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingOrder", b =>
                {
                    b.Navigation("BookingAppointments");

                    b.Navigation("BookingInvoice")
                        .IsRequired();

                    b.Navigation("BookingOrderProducts");

                    b.Navigation("BookingReview")
                        .IsRequired();
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingProduct", b =>
                {
                    b.Navigation("BookingProductDetails");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingProductDescription", b =>
                {
                    b.Navigation("BookingProductDetails");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingProductDetail", b =>
                {
                    b.Navigation("BookingOrderProducts");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingService", b =>
                {
                    b.Navigation("BookingServiceDetails");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingServiceDetail", b =>
                {
                    b.Navigation("BookingAppointments");
                });

            modelBuilder.Entity("BM.Booking.Domain.BookingSupplier", b =>
                {
                    b.Navigation("BookingProductDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
